.TH "md__home_travis_build_yogeshg_clayer_test_server__r_e_a_d_m_e" 3 "Sat Apr 29 2017" "Clayer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__home_travis_build_yogeshg_clayer_test_server__r_e_a_d_m_e \- Simple-Web-Server [![Build Status](https://travis-ci.org/eidheim/Simple-Web-Server.svg?branch=master)](https://travis-ci.org/eidheim/Simple-Web-Server) 
A very simple, fast, multithreaded, platform independent HTTP and HTTPS server and client library implemented using C++11 and Boost\&.Asio\&. Created to be an easy way to make REST resources available from C++ applications\&.
.PP
See https://github.com/eidheim/Simple-WebSocket-Server for an easy way to make WebSocket/WebSocket Secure endpoints in C++\&. Also, feel free to check out the new C++ IDE supporting C++11/14/17: https://github.com/cppit/jucipp\&.
.PP
.SS "Features"
.PP
.IP "\(bu" 2
Asynchronous request handling
.IP "\(bu" 2
Thread pool if needed
.IP "\(bu" 2
Platform independent
.IP "\(bu" 2
HTTPS support
.IP "\(bu" 2
HTTP persistent connection (for HTTP/1\&.1)
.IP "\(bu" 2
Client supports chunked transfer encoding
.IP "\(bu" 2
Timeouts, if any of Server::timeout_request and Server::timeout_content are >0 (default: Server::timeout_request=5 seconds, and Server::timeout_content=300 seconds)
.IP "\(bu" 2
Simple way to add REST resources using regex for path, and anonymous functions
.PP
.PP
.SS "Usage"
.PP
See \fBhttp_examples\&.cpp\fP or \fBhttps_examples\&.cpp\fP for example usage\&.
.PP
See particularly the JSON-POST (using Boost\&.PropertyTree) and the GET /match/[number] examples, which are most relevant\&.
.PP
.SS "Dependencies"
.PP
.IP "\(bu" 2
Boost C++ libraries
.IP "\(bu" 2
For HTTPS: OpenSSL libraries
.PP
.PP
.SS "Compile and run"
.PP
Compile with a C++11 compliant compiler: ```sh mkdir build cd build cmake \&.\&. make cd \&.\&. ```
.PP
.SS "HTTP"
.PP
Run the server and client examples: \fC\&./build/http_examples\fP
.PP
Direct your favorite browser to for instance http://localhost:8080/
.PP
.SS "HTTPS"
.PP
Before running the server, an RSA private key (server\&.key) and an SSL certificate (server\&.crt) must be created\&. Follow, for instance, the instructions given here (for a self-signed certificate): http://www.akadia.com/services/ssh_test_certificate.html
.PP
Run the server and client examples: \fC\&./build/https_examples\fP
.PP
Direct your favorite browser to for instance https://localhost:8080/ 
